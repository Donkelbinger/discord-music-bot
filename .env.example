# ==============================================================================
# DISCORD MUSIC BOT - ENVIRONMENT CONFIGURATION
# ==============================================================================
# Copy this file to `.env` and fill in your configuration values
# NEVER commit the actual .env file to version control - it contains secrets!

# ==============================================================================
# REQUIRED CONFIGURATION
# ==============================================================================

# Discord Bot Token - Get this from Discord Developer Portal
# 1. Go to https://discord.com/developers/applications
# 2. Create a new application or select existing one
# 3. Go to "Bot" section and copy the token
DISCORD_TOKEN=your_bot_token_here

# Authorized Guild IDs (Discord Server IDs) - Comma-separated list
# These are the Discord servers where your bot is allowed to operate
# To find Guild ID: Enable Developer Mode in Discord → Right-click server → Copy Server ID
# Example: AUTHORIZED_GUILD_IDS="123456789012345678,987654321098765432"
AUTHORIZED_GUILD_IDS=your_guild_id1,your_guild_id2

# ==============================================================================
# OPTIONAL CONFIGURATION
# ==============================================================================

# YouTube Cookie File Path (for age-restricted content)
# If you want to play age-restricted YouTube content, provide path to cookie file
# Leave empty to skip age-restricted content
# Example: YOUTUBE_COOKIE_FILE=./cookies.txt
YOUTUBE_COOKIE_FILE=

# Log Level - Controls how detailed the bot logs are
# Options: DEBUG, INFO, WARNING, ERROR, CRITICAL
# DEBUG: Very detailed logs (for development)
# INFO: Standard operation logs (recommended)
# WARNING: Only warnings and errors
# ERROR: Only errors and critical issues
LOG_LEVEL=INFO

# Bot Command Prefix (for prefix commands, if implemented)
# Default is "/" for slash commands, but you can set a prefix for text commands
COMMAND_PREFIX=/

# Maximum Queue Size per Guild
# Limits how many songs can be queued at once (prevents memory issues)
# Set to 0 for unlimited queue (not recommended for production)
MAX_QUEUE_SIZE=50

# Maximum songs per user in queue (prevents individual spam)
# Higher values allow users to queue more songs (good for albums/playlists)
USER_QUEUE_LIMIT=20

# ==============================================================================
# QUEUE PERSISTENCE CONFIGURATION
# ==============================================================================
# Queue persistence allows the bot to save and restore music queues across restarts
# This maintains user experience during bot crashes or planned maintenance

# Enable/Disable Queue Persistence
# Set to 'true' to enable queue saving and restoration
# Set to 'false' to disable (queues will be lost on restart)
ENABLE_QUEUE_PERSISTENCE=true

# Queue Persistence File Path
# Where to save the queue state data (JSON format)
# Directory will be created automatically if it doesn't exist
# Default: data/queue_state.json
QUEUE_PERSISTENCE_FILE=data/queue_state.json

# Maximum Age for Queue Restoration (in hours)
# How old saved queue data can be before it's considered stale
# Prevents restoring very old queues that users may not remember
# Set to 0 to disable age checking (always restore)
QUEUE_PERSISTENCE_MAX_AGE_HOURS=24

# Periodic Save Interval (in minutes)
# How often to automatically save queue state in the background
# Lower values = more frequent saves = better crash recovery
# Higher values = less disk I/O = better performance
# Recommended: 5-15 minutes
QUEUE_SAVE_INTERVAL_MINUTES=5

# Voice Channel Auto-disconnect Timeout (in seconds)
# Bot will leave voice channel after this many seconds of inactivity
# Default: 300 seconds (5 minutes)
VOICE_TIMEOUT=300

# Audio Quality Settings
# Options: best, high, medium, low
# best: Highest quality (more bandwidth/storage)
# high: Good balance of quality and performance
# medium: Standard quality (recommended)
# low: Lower quality (saves bandwidth)
AUDIO_QUALITY=medium

# ==============================================================================
# ADVANCED CONFIGURATION (Optional)
# ==============================================================================

# Database URL (if using database for persistence)
# Leave empty to use in-memory storage only
# Example: DATABASE_URL=sqlite:///bot_data.db
DATABASE_URL=

# Redis URL (for distributed deployments)
# Used for sharing state between multiple bot instances
# Leave empty for single-instance deployment
# Example: REDIS_URL=redis://localhost:6379
REDIS_URL=

# Sentry DSN (for error monitoring)
# Get this from https://sentry.io for production error tracking
# Leave empty to disable error monitoring
SENTRY_DSN=

# Custom yt-dlp Options (JSON format)
# Advanced users can customize yt-dlp behavior
# Leave empty for default settings
# Example: YTDL_OPTIONS={"format": "bestaudio/best", "noplaylist": true}
YTDL_OPTIONS=

# ==============================================================================
# DEPLOYMENT SPECIFIC SETTINGS
# ==============================================================================

# Environment Type
# Options: development, staging, production
# Affects logging and error handling behavior
ENVIRONMENT=development

# Health Check Port (for Docker/Kubernetes)
# Port for health check endpoint (optional)
HEALTH_CHECK_PORT=8080

# ==============================================================================
# SECURITY NOTES
# ==============================================================================
# 
# 1. NEVER commit your .env file to version control
# 2. Keep your DISCORD_TOKEN secret - it gives full access to your bot
# 3. Regularly rotate your Discord token if compromised
# 4. Use strong, unique passwords for any database connections
# 5. Limit AUTHORIZED_GUILD_IDS to only servers you trust
# 6. Monitor logs for unauthorized access attempts
#
# ==============================================================================
